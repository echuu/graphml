// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "graphml_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// testParallel
double testParallel(arma::umat G, u_int b, arma::mat V, u_int J);
RcppExport SEXP _graphml_testParallel(SEXP GSEXP, SEXP bSEXP, SEXP VSEXP, SEXP JSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type G(GSEXP);
    Rcpp::traits::input_parameter< u_int >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< u_int >::type J(JSEXP);
    rcpp_result_gen = Rcpp::wrap(testParallel(G, b, V, J));
    return rcpp_result_gen;
END_RCPP
}
// testmap
double testmap(arma::umat G, u_int b, arma::mat V, u_int J);
RcppExport SEXP _graphml_testmap(SEXP GSEXP, SEXP bSEXP, SEXP VSEXP, SEXP JSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type G(GSEXP);
    Rcpp::traits::input_parameter< u_int >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< u_int >::type J(JSEXP);
    rcpp_result_gen = Rcpp::wrap(testmap(G, b, V, J));
    return rcpp_result_gen;
END_RCPP
}
// approxfaster
double approxfaster(arma::umat G, u_int b, arma::mat V, u_int J);
RcppExport SEXP _graphml_approxfaster(SEXP GSEXP, SEXP bSEXP, SEXP VSEXP, SEXP JSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type G(GSEXP);
    Rcpp::traits::input_parameter< u_int >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< u_int >::type J(JSEXP);
    rcpp_result_gen = Rcpp::wrap(approxfaster(G, b, V, J));
    return rcpp_result_gen;
END_RCPP
}
// ep_logz
double ep_logz(arma::vec m, arma::mat K, arma::vec lb, arma::vec ub);
RcppExport SEXP _graphml_ep_logz(SEXP mSEXP, SEXP KSEXP, SEXP lbSEXP, SEXP ubSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ub(ubSEXP);
    rcpp_result_gen = Rcpp::wrap(ep_logz(m, K, lb, ub));
    return rcpp_result_gen;
END_RCPP
}
// generalApprox
double generalApprox(arma::umat G, u_int b, arma::mat V, u_int J);
RcppExport SEXP _graphml_generalApprox(SEXP GSEXP, SEXP bSEXP, SEXP VSEXP, SEXP JSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type G(GSEXP);
    Rcpp::traits::input_parameter< u_int >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< u_int >::type J(JSEXP);
    rcpp_result_gen = Rcpp::wrap(generalApprox(G, b, V, J));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_graphml_testParallel", (DL_FUNC) &_graphml_testParallel, 4},
    {"_graphml_testmap", (DL_FUNC) &_graphml_testmap, 4},
    {"_graphml_approxfaster", (DL_FUNC) &_graphml_approxfaster, 4},
    {"_graphml_ep_logz", (DL_FUNC) &_graphml_ep_logz, 4},
    {"_graphml_generalApprox", (DL_FUNC) &_graphml_generalApprox, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_graphml(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
