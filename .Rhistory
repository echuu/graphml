## this file has a lot of files that we eventually want to move to C++ so we don't
## have to rely on R implementation
source("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish_density.R")
library(BDgraph)
library(dplyr)
set.seed(1)
p = 5
G = matrix(c(1,1,0,1,1,
1,1,1,0,0,
0,1,1,1,1,
1,0,1,1,1,
1,0,1,1,1), p, p)
GG = initGeneralGraph(G, b, V)
initGeneralGraph = function(G, b, V) {
# input:
# G: graph in adjacency matrix form
# b: degrees of freedom for g-wishart distribution
# n: pseudo-sample size, used to initialize the scale matrix
# V: unscaled matrix
#
# output: list with various quantities that will be used in future calcs
# G:         graph
# b:         degrees of freedom
# n:         pseudo-sample size, used to initialize the scale matrix
# p:         dimension of graph
# V_n:       unscaled matrix
# S:         S = X'X when there is data (for posteriors)
# P:         upper cholesky factor of the scale matrix V_n
# D:         dimension of parameter space (# of free parameters)
# edgeInd:   bool indicator for edges in G (upper tri + diag elements only)
# nu_i       defined in step 2, p. 329 of Atay
# b_i:       defined in step 2, p. 329 of Atay
# t_ind:     (row,col) of the location of each of the free parameters
# n_nonfree: number of nonfree parameters
# vbar:      nonfree elements
p   = ncol(G)           # dimension fo the graph
# V_n = n * V           # scale matrix for gW distribution
V   = V
P   = chol(solve(V))    # upper cholesky factor; D^(-1) = TT' in Atay paper
# S   = matrix(0, p, p)   # S = X'X when there is data (for posteriors)
FREE_PARAMS_ALL = c(upper.tri(diag(1, p), diag = T) & G)
edgeInd = G[upper.tri(G, diag = TRUE)] %>% as.logical
## construct A matrix so that we can compute k_i
A = (upper.tri(diag(1, p), diag = F) & G) + 0
k_i  = colSums(A) # see step 2, p. 329 of Atay
nu_i = rowSums(A) # see step 2, p. 329 of Atay
b_i  = nu_i + k_i + 1
D = sum(edgeInd) # number of free parameters / dimension of parameter space
index_mat = matrix(0, p, p)
index_mat[upper.tri(index_mat, diag = T)][edgeInd] = 1:D
index_mat[upper.tri(index_mat, diag = T)]
t_ind = which(index_mat!=0,arr.ind = T)
index_mat[lower.tri(index_mat)] = NA
vbar = which(index_mat==0,arr.ind = T) # non-free elements
n_nonfree = nrow(vbar)
obj = list(G = G, b = b, V = V, p = p, P = P, # S = S,
D = D, edgeInd = edgeInd, FREE_PARAMS_ALL = FREE_PARAMS_ALL,
nu_i = nu_i, b_i = b_i,
t_ind = t_ind, n_nonfree = n_nonfree, vbar = vbar,
n_graphs = 1)
return(obj)
}
GG = initGeneralGraph(G, b, V)
V = rgwish(1, G, b, diag(p))
b = 300
V = rgwish(1, G, b, diag(p))
GG = initGeneralGraph(G, b, V)
J = 2000
samps = rGW(J, GG)
P = chol(solve(V))
samps = samplegw(J, G, b, 0, V, 0, solve(P), GG$FREE_PARAMS_ALL)
u_samps = samps$Psi_free %>% data.frame
u_df = hybridml::gwish_preprocess(u_samps, D, params) # J x (D_u + 1)
u_samps = samps$Psi_free %>% data.frame
u_df = hybridml::gwish_preprocess(u_samps, D, GG) # J x (D_u + 1)
u_star = gwish_globalMode_mod(u_df, GG, GG,
psi = psi_cpp_mat,
grad = grad_gwish,
hess = hess_gwish)
u_df = hybridml::gwish_preprocess(u_samps, GG$D, GG) # J x (D_u + 1)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
u_star = gwish_globalMode_mod(u_df, GG, GG,
psi = psi_cpp_mat,
grad = grad_gwish,
hess = hess_gwish)
psi_cpp_mat
grad_gwish
hess_gwish
u_star
gnorm(G, b, V, 100)
out = hybml_gwish_cpp(u_df, params, psi = psi_cpp_mat, grad = grad_gwish,
hess = hess_gwish, u_0 = u_star)
out = hybml_gwish_cpp(u_df, GG, psi = psi_cpp_mat, grad = grad_gwish,
hess = hess_gwish, u_0 = u_star)
out$logz
gnorm(G, b, V, 100)
u_star = gwish_globalMode_mod(u_df, GG, GG,
psi = psi_cpp_mat,
grad = grad_gwish,
hess = hess_gwish)
u_df %>% head
samps = rGW(J, GG)
Rcpp::sourceCpp("C:/Users/ericc/Documents/graphml/src/rgwishart.cpp")
samps = rGW(J, GG)
u_samps = samps$Psi_free %>% data.frame
u_df = hybridml::gwish_preprocess(u_samps, GG$D, GG) # J x (D_u + 1)
u_df %>% head
u_star = gwish_globalMode_mod(u_df, GG, GG,
psi = psi_cpp_mat,
grad = grad_gwish,
hess = hess_gwish)
out = hybml_gwish_cpp(u_df, GG, psi = psi_cpp_mat, grad = grad_gwish,
hess = hess_gwish, u_0 = u_star)
out$logz
gnorm(G, b, V, 100)
samps = samplegw(J, G, b, 0, V, 0, solve(P), GG$FREE_PARAMS_ALL)
u_samps = samps$Psi_free %>% data.frame
u_df = hybridml::gwish_preprocess(u_samps, GG$D, GG) # J x (D_u + 1)
u_df %>% head
u_df %>% tail
samps = rGW(J, GG)
u_samps = samps$Psi_free %>% data.frame
u_df = hybridml::gwish_preprocess(u_samps, GG$D, GG) # J x (D_u + 1)
u_df %>% head
u_df %>% tail
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
init_graph(G, b, V)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
init_graph(G, b, V)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
init_graph(G, b, V)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
init_graph(G, b, V)
GG$P
c(upper.tri(diag(1, p), diag = T) & G)
upper.tri(diag(1, p), diag = T)
G
upper.tri(diag(1, p), diag = T) & G
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
matrix2vector(G)
G
GG$FREE_PARAMS_ALL
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
getFreeElem(G, p)
G
matrix2vector(getFreeElem(G, p))
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
getFreeElem(G, p)
GG$FREE_PARAMS_ALL
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
matrix2vector(G)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
getFreeElem(G, p)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
getFreeElem(G, p)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
getFreeElem(G, p)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
init_graph(G, b, V)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
u = unname(unlist(u_df[1, 1:GG$D]))
u
create_psi_mat_cpp(u, GG)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
create_psi_mat_cpp(u, GG)
GG$FREE_PARAMS_ALL
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
create_psi_mat_cpp(u, GG)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
getFreeElem(G, p)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
init_graph(G, b, V)
G[upper.tri(G, diag = TRUE)] %>% as.logical
GG$FREE_PARAMS_ALL
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
create_psi_mat_cpp(u, GG)
G[upper.tri(G, diag = TRUE)]
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
init_graph(G, b, V)
GG$edgeInd
(upper.tri(diag(1, p), diag = F) & G) + 0
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
x = init_graph(G, b, V)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
x = init_graph(G, b, V)
(upper.tri(diag(1, p), diag = F) & G)
(upper.tri(diag(1, p), diag = F) & G) + 0
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
x = init_graph(G, b, V)
GG$k_i
GG$nu_i
GG$b_i
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
x = init_graph(G, b, V)
x$k_i
x$nu_i
GG$b_i
GG$nu_i
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
x = init_graph(G, b, V)
x$k_i
x$nu_i
GG$b_i
GG$nu_i
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
x = init_graph(G, b, V)
x$k_i
x$nu_i
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
x = init_graph(G, b, V)
x$k_i
x$nu_i
G[upper.tri(G, diag = TRUE)]
GG$edgeInd
GG$edgeInd %>% sum
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
x = init_graph(G, b, V)
x$k_i
x$nu_i
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
x = init_graph(G, b, V)
x$b_i
x$nu_i
GG$b_i
GG$nu_i
matrix(0, p, p)
index_mat = matrix(0, p, p)
index_mat[upper.tri(index_mat, diag = T)][edgeInd] = 1:D
index_mat[upper.tri(index_mat, diag = T)]
index_mat = matrix(0, p, p)
index_mat
index_mat[upper.tri(index_mat, diag = T)][edgeInd] = 1:GG$D
index_mat[upper.tri(index_mat, diag = T)][GG$edgeInd] = 1:GG$D
index_mat
index_mat[upper.tri(index_mat, diag = T)]
t_ind = which(index_mat!=0,arr.ind = T)
t_ind
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
x = init_graph(G, b, V)
source('~/graphml/examples/gwish.R', echo=TRUE)
x$t_ind
0 & 5
0 % 5
0 %% 5
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
x = init_graph(G, b, V)
x$t_ind
GG$t_ind
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
x = init_graph(G, b, V)
x$t_ind
index_mat[lower.tri(index_mat)] = NA
index_mat
vbar = which(index_mat==0,arr.ind = T) # non-free elements
n_nonfree = nrow(vbar)
vbar
GG$t_ind
getFreeElem(G, p)
!getFreeElem(G, p)
GG$D * (GG$D + 1) / 2
GG$p * (GG$p + 1) /p 2
GG$p * (GG$p + 1) / 2
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
getNonFreeElem(G, p)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
getNonFreeElem(G, p)
x = init_graph(G, b, V)
x$t_ind
x$b_i
x$nu_i
x$vbar
GG$vbar
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
x = init_graph(G, b, V)
x$vbar
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
x = init_graph(G, b, V)
x$t_ind
x$vbar
x$b_i
x$nu_i
GG_cpp = init_graph(G, b, V)
u_star_cpp = gwish_globalMode_mod(u_df, GG_cpp, GG_cpp,
psi = psi_cpp_mat,
grad = grad_gwish,
hess = hess_gwish)
u_star = gwish_globalMode_mod(u_df, GG, GG,
psi = psi_cpp_mat,
grad = grad_gwish,
hess = hess_gwish)
u_star_cpp
out = hybml_gwish_cpp(u_df, GG_cpp,
psi = psi_cpp_mat,
grad = grad_gwish,
hess = hess_gwish,
u_0 = u_star_cpp)
out$logz
out$logz
gnorm(G, b, V, 100)
which(u_df$psi_u == min(u_df$psi_u))
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
calc_mode(u_df, GG_cpp)
calcMode(u_df, GG_cpp)
as.matrix(u_df) %>% head
calcMode(as.matrix(u_df), GG_cpp)
which(u_df$psi_u == min(u_df$psi_u))
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
calcMode(as.matrix(u_df), GG_cpp)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
calcMode(as.matrix(u_df), GG_cpp)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
calcMode(as.matrix(u_df), GG_cpp)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
calcMode(as.matrix(u_df), GG_cpp)
u_df %>% head
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
calcMode(as.matrix(u_df), GG_cpp)
u_star = gwish_globalMode_mod(u_df, GG, GG,
psi = psi_cpp_mat,
grad = grad_gwish,
hess = hess_gwish)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
calcMode(as.matrix(u_df), GG_cpp)
calcMode(as.matrix(u_df), GG_cpp, VERBOSE = TRUE)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
calcMode(as.matrix(u_df), GG_cpp, VERBOSE = TRUE)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
calcMode(as.matrix(u_df), GG_cpp, VERBOSE = TRUE)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
calcMode(as.matrix(u_df), GG_cpp, VERBOSE = TRUE)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
calcMode(as.matrix(u_df), GG_cpp, VERBOSE = TRUE)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
calcMode(as.matrix(u_df), GG_cpp, VERBOSE = TRUE)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
calcMode(as.matrix(u_df), GG_cpp, VERBOSE = TRUE)
calcMode(as.matrix(u_df), GG_cpp_
calcMode(as.matrix(u_df), GG_cpp)
create_psi_mat_cpp(u, GG)
create_psi_mat_cpp(u, GG_cpp)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
calcMode(as.matrix(u_df), GG_cpp, VERBOSE = TRUE)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
calcMode(as.matrix(u_df), GG_cpp, VERBOSE = TRUE)
u
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
calcMode(as.matrix(u_df), GG_cpp, VERBOSE = TRUE)
u_df %>% head
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
calcMode(as.matrix(u_df), GG_cpp, VERBOSE = TRUE)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
calcMode(as.matrix(u_df), GG_cpp, VERBOSE = TRUE)
u_star_cpp = gwish_globalMode_mod(u_df, GG_cpp, GG_cpp,
psi = psi_cpp_mat,
grad = grad_gwish,
hess = hess_gwish)
u_star_cpp
microbenchmark::microbenchmark(r = gwish_globalMode_mod(u_df, GG_cpp, GG_cpp,
psi = psi_cpp_mat,
grad = grad_gwish,
hess = hess_gwish),
cpp = calcMode(as.matrix(u_df), GG_cpp, VERBOSE = TRUE),
times = 20)
microbenchmark::microbenchmark(r = gwish_globalMode_mod(u_df, GG_cpp, GG_cpp,
psi = psi_cpp_mat,
grad = grad_gwish,
hess = hess_gwish),
cpp = calcMode(as.matrix(u_df), GG_cpp, VERBOSE = FALSE),
times = 20)
gwish_globalMode_mod = function(u_df, params, params_G5,
psi = psi, grad = grad, hess = hess,
tolerance = 1e-5, maxsteps = 200) {
# use the MAP as the starting point for the algorithm
MAP_LOC = which(u_df$psi_u == min(u_df$psi_u))
theta = u_df[MAP_LOC,1:params$D] %>% unname() %>% unlist()
numsteps = 0
tolcriterion = 100
step.size = 1
# print("hi")
while(tolcriterion > tolerance && numsteps < maxsteps){
# print(numsteps)
# hess_obj = hess(theta, params_G5)
theta_mat = create_psi_mat_cpp(theta, params)
# print("hi")
G = -hess(theta_mat, params_G5)
invG = solve(G)
# G = -hess(theta, params)
# invG = solve(G)
thetaNew = theta + step.size * invG %*% grad(theta_mat, params_G5)
thetanew_mat = create_psi_mat_cpp(thetaNew, params)
# if precision turns negative or if the posterior probability of
# thetaNew becomes smaller than the posterior probability of theta
if(-psi(thetanew_mat, params) < -psi(theta_mat, params)) {
cat('tolerance reached on log scale =', tolcriterion, '\n')
print(paste("converged -- ", numsteps, " iters", sep = ''))
return(theta)
}
tolcriterion = abs(psi(thetanew_mat, params)-psi(theta_mat, params))
theta = thetaNew
numsteps = numsteps + 1
}
if(numsteps == maxsteps)
warning('Maximum number of steps reached in Newton method.')
# print(paste("converged -- ", numsteps, " iters", sep = ''))
return(theta)
}
microbenchmark::microbenchmark(r = gwish_globalMode_mod(u_df, GG_cpp, GG_cpp,
psi = psi_cpp_mat,
grad = grad_gwish,
hess = hess_gwish),
cpp = calcMode(as.matrix(u_df), GG_cpp, VERBOSE = FALSE),
times = 20)
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
calcMode(as.matrix(u_df), GG_cpp, VERBOSE = TRUE)
u_star_cpp
microbenchmark::microbenchmark(r = gwish_globalMode_mod(u_df, GG_cpp, GG_cpp,
psi = psi_cpp_mat,
grad = grad_gwish,
hess = hess_gwish),
cpp = calcMode(as.matrix(u_df), GG_cpp, VERBOSE = FALSE),
times = 20)
?hybridml::gwish_preprocess
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
evalPsi(samps, GG) %>% head
samps %>% head
u_samps %>% head
samps$Psi_free %>% head
samps_mat = samps$Psi_free
evalPsi(samps_mat, GG) %>% head
Rcpp::sourceCpp("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish.cpp")
evalPsi(samps_mat, GG) %>% head
u_df %>% head
microbenchmark::microbenchmark(r = hybridml::gwish_preprocess(u_samps, GG$D, GG),
cpp = evalPsi(samps_mat, GG),
times = 20)
rgwish_c
graphml::rgwish_c
library(graphml)
library(graphml)
J = 2000
samps = rGW(J, GG)
rGW
GG
samps = graphml::rGW(J, GG)
