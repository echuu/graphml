BDgraph::gnorm(G, b, V, 1000)
samps %>% head
test_func = findAllCandidatePoints(samps, unname(u_rpart$where),
u_star, GG$D)
library(graphml)
test_func = findAllCandidatePoints(samps, unname(u_rpart$where),
u_star, GG$D)
library(graphml)
test_func = findAllCandidatePoints(samps, unname(u_rpart$where),
u_star, GG$D)
library(graphml)
test_func = findAllCandidatePoints(samps, unname(u_rpart$where),
u_star, GG$D)
library(graphml)
test_func = findAllCandidatePoints(samps, unname(u_rpart$where),
u_star, GG$D)
u_df_part$leaf_id %>% unique
u_df_part$leaf_id %>% unique %>% length
library(graphml)
test_func = findAllCandidatePoints(samps, unname(u_rpart$where),
u_star, GG$D)
u_df_part[1999,]
u_df_part[1995,]
samps %>% dim
library(graphml)
J = 2000
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(samps, GG)
u_df_cpp = data.frame(samps_psi)
# u_df_cpp %>% head
u_df_names = character(GG$D + 1)
for (d in 1:GG$D) {
u_df_names[d] = paste("u", d, sep = '')
}
u_df_names[GG$D + 1] = "psi_u"
names(u_df_cpp) = u_df_names
u_star_cpp = graphml::calcMode(as.matrix(u_df_cpp), GG)
h(u_df_cpp, GG, GG$D, u_0 = u_star_cpp)
BDgraph::gnorm(G, b, V, 1000)
u_rpart = rpart::rpart(psi_u ~ ., u_df_cpp)
param_support = graphml::support(samps, GG$D)
u_partition = hybridml::extractPartition(u_rpart, param_support)
u_df_part = u_df_cpp %>% dplyr::mutate(leaf_id = u_rpart$where)
l1_cost = apply(u_df_part[,1:GG$D], 1, hybridml::l1_norm, u_0 = u_star)
u_df_part = u_df_part %>% dplyr::mutate(l1_cost = l1_cost)
# take min result, group_by() leaf_id
psi_df = u_df_part %>%
dplyr::group_by(leaf_id) %>% dplyr::filter(l1_cost == min(l1_cost)) %>%
data.frame
psi_df %>% head
test_func = findAllCandidatePoints(samps, unname(u_rpart$where),
u_star, GG$D)
library(graphml)
test_func = findAllCandidatePoints(samps, unname(u_rpart$where),
u_star, GG$D)
test_func %>% dim
test_func
psi_df
unname(u_rpart$where) %>% sort
unname(u_rpart$where) %>% unique %>% sort
test_func
psi_df
r = function() {
u_rpart = rpart::rpart(psi_u ~ ., u_df_cpp)
param_support = graphml::support(samps, GG$D)
u_partition = hybridml::extractPartition(u_rpart, param_support)
u_df_part = u_df_cpp %>% dplyr::mutate(leaf_id = u_rpart$where)
l1_cost = apply(u_df_part[,1:GG$D], 1, hybridml::l1_norm, u_0 = u_star)
u_df_part = u_df_part %>% dplyr::mutate(l1_cost = l1_cost)
# take min result, group_by() leaf_id
psi_df = u_df_part %>%
dplyr::group_by(leaf_id) %>% dplyr::filter(l1_cost == min(l1_cost)) %>%
data.frame
}
r()
r = function() {
u_df_part = u_df_cpp %>% dplyr::mutate(leaf_id = u_rpart$where)
l1_cost = apply(u_df_part[,1:GG$D], 1, hybridml::l1_norm, u_0 = u_star)
u_df_part = u_df_part %>% dplyr::mutate(l1_cost = l1_cost)
# take min result, group_by() leaf_id
psi_df = u_df_part %>%
dplyr::group_by(leaf_id) %>% dplyr::filter(l1_cost == min(l1_cost)) %>%
data.frame
}
microbenchmark::microbenchmark(
r = r(),
cpp = findAllCandidatePoints(samps, unname(u_rpart$where),
u_star, GG$D),
times = 10
)
library(graphml)
library(graphml)
test_func = findAllCandidatePoints(samps, unname(u_rpart$where),
u_star, GG$D)
test_func %>% tail
bounds
bounds
u_partition
u_partition %>% dplyr::arrange(leaf_id) %>%
dplyr::select(-c("psi_hat", "leaf_id"))
bounds
t(bounds)
library(graphml)
t(bounds)
u_partition
bounds = u_partition %>% dplyr::arrange(leaf_id) %>%
dplyr::select(-c("psi_hat", "leaf_id"))
u_partition$leaf_id
test_func = createPartitionMap(t(bounds), u_partition$leaf_id)
test_func
# take min result, group_by() leaf_id
psi_df = u_df_part %>%
dplyr::group_by(leaf_id) %>% dplyr::filter(l1_cost == min(l1_cost)) %>%
data.frame
bounds = u_partition %>% dplyr::arrange(leaf_id) %>%
dplyr::select(-c("psi_hat", "leaf_id"))
psi_df = psi_df %>% dplyr::arrange(leaf_id)
K = nrow(bounds)
graphml::approx_integral(K, as.matrix(psi_df), as.matrix(bounds), params)
graphml::approx_integral(K, as.matrix(psi_df), as.matrix(bounds), GG)
h(u_df, GG, GG$D, u_0 = u_star)
BDgraph::gnorm(G, b, V, 1000)
h(u_df_cpp, GG, GG$D, u_0 = u_star_cpp)
bounds
bounds
graphml::calcMode(as.matrix(u_df_cpp), GG)
calcMode(as.matrix(u_df_cpp), GG)
u_df_cpp
GG
calcMode(as.matrix(u_df_cpp), GG)
calcMode
create_psi_mat_cpp(u, GG)
graphml::calcMode(as.matrix(u_df_cpp), GG)
library(graphml)
install.packages("RcppArmadillo")
install.packages("data.table")
install.packages("RcppArmadillo")
# source("C:/Users/ericc/Documents/hybridml/examples/gwish/gwish_density.R")
# library(BDgraph)
## import R helper functions that will eventually be ported to C++
## contains h(), cpp(), and functions that extract the partition in matrix form
## from the rpart objects
#### THESE ALL NEED TO BE LOADED INTO THE GLOBAL ENVIRONMENT
source("examples/helpers.R")
library(graphml)
library(rpart)
library(dplyr)
set.seed(1)
p = 5
G = matrix(c(1,1,0,1,1,
1,1,1,0,0,
0,1,1,1,1,
1,0,1,1,1,
1,0,1,1,1), p, p)
b = 300
V = BDgraph::rgwish(1, G, b, diag(p))
##### new implementation
GG = graphml::init_graph(G, b, V)
set.seed(1)
J = 2000
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(samps, GG)
u_df_cpp = graphml::mat2df(samps_psi, GG$df_name)
u_star_cpp = graphml::calcMode(samps_psi, GG)
approx_v1(u_df_cpp,
u_star_cpp,
samps_psi,
GG)
set.seed(1)
generalApprox(G, b, V, J)
BDgraph::gnorm(G, b, V, J)
graphml::gnorm_c(G, b, V, J)
graphml::gnormJT(G, getEdgeMat(G), b, V, J)
library(graphml)
set.seed(2021)
p = 40;
G = matrix(0, p, p)
G[1, p] = 1
for(i in 1:(p-1)){
G[i, i+1] = 1
}
G= G + t(G); diag(G) = 1
G
library(graphml)
set.seed(1)
p = 5
G = matrix(c(1,1,0,1,1,
1,1,1,0,0,
0,1,1,1,1,
1,0,1,1,1,
1,0,1,1,1), p, p)
b = 300
V = BDgraph::rgwish(1, G, b, diag(p))
##### new implementation
GG = graphml::init_graph(G, b, V)
set.seed(1)
J = 2000
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(samps, GG)
u_df_cpp = graphml::mat2df(samps_psi, GG$df_name)
u_star_cpp = graphml::calcMode(samps_psi, GG)
approx_v1(u_df_cpp,
u_star_cpp,
samps_psi,
GG)
set.seed(1)
graphml::generalApprox(G, b, V, J)
graphml::gnormJT(G, getEdgeMat(G), b, V, J)
set.seed(2021)
p = 40;
G = matrix(0, p, p)
G[1, p] = 1
for(i in 1:(p-1)){
G[i, i+1] = 1
}
G = G + t(G); diag(G) = 1
graphml::gnormJT(G, getEdgeMat(G), b, V, J)
V = BDgraph::rgwish(1, G, b, diag(p))
dim(V)
graphml::gnormJT(G, getEdgeMat(G), b, V, J)
source("examples/helpers.R")
library(graphml)
library(rpart)
library(dplyr)
set.seed(1)
p = 5
G = matrix(c(1,1,0,1,1,
1,1,1,0,0,
0,1,1,1,1,
1,0,1,1,1,
1,0,1,1,1), p, p)
b = 300
V = BDgraph::rgwish(1, G, b, diag(p))
J = 1000
##### new implementation
set.seed(1)
BDgraph::gnorm(G, b, V, J)
graphml::gnorm_c(G, b, V, J)
graphml::generalApprox(G, b, V, J)
graphml::hyb(G, b, V, J)
library(graphml)
graphml::gnormJT(G, getEdgeMat(G), b, V, J)
set.seed(1234)
p = 60
Adj = matrix(rbinom(p^2,1,0.15), p, p)
Adj = Adj + t(Adj)
diag(Adj) = 0
Adj[Adj==1]=0
Adj[Adj==2]=1
diag(Adj) = 1
EdgeMat = getEdgeMat(Adj)
# JT = getJT(EdgeMat)
b = 500
Y = matrix(rnorm(p*500), nrow = 500, ncol = p)
D = t(Y)%*%Y
# BDgraph::gnorm(Adj, b, D, 1000)
# gnorm_c(Adj, b, D, 1000)
gnormJT(Adj, EdgeMat, b, D, 1000)
library(graphml)
graphml::gnormJT(Adj, EdgeMat, b, D, 1000)
library(graphml)
graphml::gnormJT(Adj, EdgeMat, b, D, 1000)
graphml::init_graph(G, v, B)
graphml::init_graph(G, b, V)
library(graphml)
GG = graphml::init_graph(G, b, V)
samps = graphml::rgw(J, GG)
u_samps = samps%>% data.frame
source("examples/helpers.R")
library(graphml)
library(rpart)
library(dplyr)
set.seed(1)
p = 5
G = matrix(c(1,1,0,1,1,
1,1,1,0,0,
0,1,1,1,1,
1,0,1,1,1,
1,0,1,1,1), p, p)
b = 300
V = BDgraph::rgwish(1, G, b, diag(p))
J = 1000
## generate the data:
GG = graphml::init_graph(G, b, V)
samps = graphml::rgw(J, GG)
u_samps = samps%>% data.frame
# u_samps %>% head
psi = graphml::psi_cpp
u_df = hybridml::preprocess(u_samps, GG$D, GG) # J x (D_u + 1)
library(graphml)
source("examples/helpers.R")
library(graphml)
library(rpart)
library(dplyr)
set.seed(1)
p = 5
G = matrix(c(1,1,0,1,1,
1,1,1,0,0,
0,1,1,1,1,
1,0,1,1,1,
1,0,1,1,1), p, p)
b = 300
V = BDgraph::rgwish(1, G, b, diag(p))
J = 1000
## generate the data:
GG = graphml::init_graph(G, b, V)
samps = graphml::rgw(J, GG)
u_samps = samps %>% data.frame
# u_samps %>% head
psi = graphml::psi_cpp
u_df = hybridml::preprocess(u_samps, GG$D, GG) # J x (D_u + 1)
u_df %>% head
z = as.matrix(u_df)
z %>% head
GG$D
z = as.matrix(cbind(u_df[,GG$D+1], u_df[,-(GG$D+1)]))
z %>% head
z = as.matrix(unname(cbind(u_df[,GG$D+1], u_df[,-(GG$D+1)])))
z %>% head
r_func = function(u_df) {
rpart(psi_u ~ ., u_df)
}
r_func(u_df)
library(graphml)
source("examples/helpers.R")
library(graphml)
library(rpart)
library(dplyr)
set.seed(1)
p = 5
G = matrix(c(1,1,0,1,1,
1,1,1,0,0,
0,1,1,1,1,
1,0,1,1,1,
1,0,1,1,1), p, p)
b = 300
V = BDgraph::rgwish(1, G, b, diag(p))
J = 1000
## generate the data:
GG = graphml::init_graph(G, b, V)
samps = graphml::rgw(J, GG)
u_samps = samps %>% data.frame
# u_samps %>% head
psi = graphml::psi_cpp
u_df = hybridml::preprocess(u_samps, GG$D, GG) # J x (D_u + 1)
z = as.matrix(unname(cbind(u_df[,GG$D+1], u_df[,-(GG$D+1)])))
## use rpart to fit cart
r_func = function(u_df) {
rpart(psi_u ~ ., u_df)
}
microbenchmark::microbenchmark(r     = r_func(u_df),
cpp   = timeTree(z),
times = 10
)
library(graphml)
timeTree(z)
rpart.rules(r_func(u_df))
library(rpart.rules)
library(rpart.plot)
rpart.rules(r_func(u_df))
dim(rpart.rules(r_func(u_df)))
rpart.plot(r_func(u_df))
rpart.plot(r_func(u_df))
?.rpart
?rpart
findMinParallel
library(graphml)
source("examples/helpers.R")
library(graphml)
library(rpart)
library(dplyr)
set.seed(1)
p = 5
G = matrix(c(1,1,0,1,1,
1,1,1,0,0,
0,1,1,1,1,
1,0,1,1,1,
1,0,1,1,1), p, p)
b = 300
V = BDgraph::rgwish(1, G, b, diag(p))
J = 1000
##### new implementation
set.seed(1)
BDgraph::gnorm(G, b, V, J)
graphml::gnorm_c(G, b, V, J)
graphml::gnormJT(G, getEdgeMat(G), b, V, J)
graphml::generalApprox(G, b, V, J)
## updated implementation of the tree fitting algorithm
graphml::hyb(G, b, V, J)
## updated implementation of the tree fitting algorithm
graphml::hyb(G, b, V, J)
microbenchmark::microbenchmark(
jt  = graphml::gnormJT(G, getEdgeMat(G), b, V, J),
old = graphml::generalApprox(G, b, V, J),
hyb_cpp = graphml::hyb(G, b, V, J)
times = 20
)
microbenchmark::microbenchmark(
jt  = graphml::gnormJT(G, getEdgeMat(G), b, V, J),
old = graphml::generalApprox(G, b, V, J),
hyb_cpp = graphml::hyb(G, b, V, J),
times = 20
)
649.3497/178.3
library(graphml)
library(graphml)
source("examples/helpers.R")
library(graphml)
library(rpart)
library(dplyr)
set.seed(1)
p = 5
G = matrix(c(1,1,0,1,1,
1,1,1,0,0,
0,1,1,1,1,
1,0,1,1,1,
1,0,1,1,1), p, p)
b = 300
V = BDgraph::rgwish(1, G, b, diag(p))
J = 1000
##### new implementation
set.seed(1)
graphml::testParallel(G, b, V, J)
BDgraph::gnorm(G, b, V, J)
hyb(G, b, V, J)
library(graphml)
library(graphml)
set.seed(1)
graphml::test(G, b, V, J)
library(graphml)
graphml::test(G, b, V, J)
library(graphml)
graphml::test(G, b, V, J)
library(graphml)
graphml::test(G, b, V, J)
library(graphml)
graphml::test(G, b, V, J)
library(graphml)
graphml::test(G, b, V, J)
library(graphml)
set.seed(1)
graphml::test(G, b, V, J)
set.seed(1)
graphml::test(G, b, V, J)
library(graphml)
graphml::test(G, b, V, J)
library(graphml)
graphml::test(G, b, V, J)
library(graphml)
graphml::test(G, b, V, J)
library(graphml)
graphml::test(G, b, V, J)
library(graphml)
library(graphml)
graphml::test(G, b, V, J)
library(graphml)
set.seed(1)
graphml::test(G, b, V, J)
library(graphml)
set.seed(1)
graphml::test(G, b, V, J)
set.seed(1)
graphml::testParallel(G, b, V, J)
library(graphml)
set.seed(1)
graphml::test(G, b, V, J)
set.seed(1)
graphml::testParallel(G, b, V, J)
microbenchmark::microbenchmark(
rpart = graphml::generalApprox(G, b, V, J),
old_cpp  = graphml::hyb(G, b, V, J),
new_cpp = graphml::test(G, b, V, J),
pll_cpp = graphml::testParallel(G, b, V, J),
times = 20
)
571.8955 / 187.0161
library(graphml)
set.seed(1)
graphml::testParallel(G, b, V, J)
library(graphml)
set.seed(1)
graphml::testParallel(G, b, V, J)
library(graphml)
set.seed(1)
graphml::testParallel(G, b, V, J)
microbenchmark::microbenchmark(
rpart = graphml::generalApprox(G, b, V, J),
old_cpp  = graphml::hyb(G, b, V, J),
new_cpp = graphml::test(G, b, V, J),
pll_cpp = graphml::testParallel(G, b, V, J),
times = 20
)
library(graphml)
microbenchmark::microbenchmark(
rpart = graphml::generalApprox(G, b, V, J),
old_cpp  = graphml::hyb(G, b, V, J),
new_cpp = graphml::test(G, b, V, J),
pll_cpp = graphml::testParallel(G, b, V, J),
times = 20
)
library(graphml)
set.seed(1)
graphml::testParallel(G, b, V, J)
library(graphml)
microbenchmark::microbenchmark(
rpart = graphml::generalApprox(G, b, V, J),
old_cpp  = graphml::hyb(G, b, V, J),
new_cpp = graphml::test(G, b, V, J),
pll_cpp = graphml::testParallel(G, b, V, J),
times = 20
)
593.4942  / 194.9815
