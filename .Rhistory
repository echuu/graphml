h(u_df, GG, GG$D, u_0 = u_star)
rGW = function(J, graph_obj) {
# G = graph_obj$G
Omega = array(0, dim=c(graph_obj$p, graph_obj$p, J))
# Omega_post = rgwish(J, G, b + N, V + S)
Z = chol(solve(graph_obj$V))
P_inv = solve(Z)
for (j in 1:J) {
Omega[,,j] = graphml::rgwish_c(graph_obj$G, Z, graph_obj$b, graph_obj$p, 1e-8)
}
## Compute Phi (upper triangular), stored column-wise, Phi'Phi = Omega
Phi = apply(Omega, 3, chol) # (p^2) x J
## Compute Psi
Psi = apply(Phi, 2, computePsi, P_inv = P_inv)
## Extract free elements of Psi
Psi_free = apply(Psi, 2, extractFree,
free_ind = as.logical(graph_obj$FREE_PARAMS_ALL))
out = list(Phi = t(Phi),
Psi = t(Psi),
Psi_free = t(Psi_free),
Omega = Omega)
}
##### old implementation
GG = graphml::init_graph(G, b, V)
samps = rGW(J, GG)
u_samps = samps$Psi_free %>% data.frame
psi = graphml::psi_cpp
u_df = hybridml::preprocess(u_samps, GG$D, GG) # J x (D_u + 1)
u_star = graphml::calcMode(as.matrix(u_df), GG)
h(u_df, GG, GG$D, u_0 = u_star)
BDgraph::gnorm(G, b, V, 1000)
h(u_df_cpp, GG, GG$D, u_0 = u_star_cpp)
h
hybridml::h
hybridml::extractSupport
hybridml::extractSupport(u_df_cpp, GG$D)
library(graphml)
library(graphml)
support(u_samps)
support(u_samps, GG$D)
test = graphml::rgw(J, GG)
samps = graphml::evalPsi(test, GG)
u_df_cpp = data.frame(samps)
support(u_samps, GG$D)
support(samps, GG$D)
hybridml::extractPartition()
hybridml::extractSupport
samps %>% head
library(graphml)
support(samps, GG$D)
hybridml::extractSupport(samps, GG$D)
u_rpart = rpart::rpart(psi_u ~ ., u_df_cpp)
u_df_cpp %>% head
names(u_df_cpp) = u_df_names
u_df_cpp %>% head()
u_rpart = rpart::rpart(psi_u ~ ., u_df_cpp)
param_support = graphml::support(samps, GG$D)
param_support
u_partition = hybridml::extractPartition(u_rpart, param_support)
u_partition
u_rpart$where %>% length
u_df_part = u_df_cpp %>% dplyr::mutate(leaf_id = u_rpart$where)
u_df_part %>% head
u_df_part$leaf_id
u_df_part$leaf_id %>% table
u_df_part$leaf_id %>% unique
u_df_cpp %>% head
library(graphml)
samps %>% head
test %>% head
findCandidatePoint(test, u_star, GG$D)
hybridml::l1_norm(test[1,], u_star)
l1_cost = apply(u_df_part[,1:GG$D], 1, hybridml::l1_norm, u_0 = u_star)
l1_cost %>% head
l1_cost %>% length
library(graphml)
findCandidatePoint(test, u_star, GG$D)
library(graphml)
cost = findCandidatePoint(test, u_star, GG$D)
data.frame(l1_cost, cost)
all.equal(l1_cost, cost)
data.frame(l1_cost, cost) %>% head
l1Cost %>% str
str(l1Cost)
str(l1_cost)
str(cost)
all.equal(c(l1_cost), c(cost))
microbenchmark::microbenchmark(
r = apply(u_df_part[,1:GG$D], 1, hybridml::l1_norm, u_0 = u_star),
cpp = findCandidatePoint(test, u_star, GG$D),
times = 30
)
bounds = u_partition %>% dplyr::arrange(leaf_id) %>%
dplyr::select(-c("psi_hat", "leaf_id"))
psi_df = psi_df %>% dplyr::arrange(leaf_id)
# take min result, group_by() leaf_id
psi_df = u_df_part %>%
dplyr::group_by(leaf_id) %>% dplyr::filter(l1_cost == min(l1_cost)) %>%
data.frame
u_df_part = u_df_part %>% dplyr::mutate(l1_cost = l1_cost)
# take min result, group_by() leaf_id
psi_df = u_df_part %>%
dplyr::group_by(leaf_id) %>% dplyr::filter(l1_cost == min(l1_cost)) %>%
data.frame
bounds = u_partition %>% dplyr::arrange(leaf_id) %>%
dplyr::select(-c("psi_hat", "leaf_id"))
psi_df = psi_df %>% dplyr::arrange(leaf_id)
psi_df %>% head
psi_df
psi_df
bounds
psi_df
u_df_part %>% head
library(graphml)
u_df_part %>% head
u_rpart$where %>% head
unname(u_rpart$where) %>% head
findAllCandidatePoints(u_df_part, unname(u_rpart$where), u_star, GG$D)
findAllCandidatePoints(as.matrix(u_df_part), unname(u_rpart$where), u_star, GG$D)
test_func = findAllCandidatePoints(as.matrix(u_df_part), unname(u_rpart$where), u_star, GG$D)
test_func %>% dim
u_rpart$where %>% table
psi_df
u_df_part %>%
dplyr::group_by(leaf_id) %>% dplyr::filter(l1_cost == min(l1_cost)) %>%
data.frame
u_rpart$where
u_rpart$where %>% unique
u_df_part %>%
dplyr::group_by(leaf_id) %>% dplyr::filter(l1_cost == min(l1_cost)) %>%
data.frame
library(graphml)
library(graphml)
set.seed(1)
p = 5
G = matrix(c(1,1,0,1,1,
1,1,1,0,0,
0,1,1,1,1,
1,0,1,1,1,
1,0,1,1,1), p, p)
b = 300
V = rgwish(1, G, b, diag(p))
V = BDgraph::rgwish(1, G, b, diag(p))
set.seed(1)
p = 5
G = matrix(c(1,1,0,1,1,
1,1,1,0,0,
0,1,1,1,1,
1,0,1,1,1,
1,0,1,1,1), p, p)
b = 300
V = BDgraph::rgwish(1, G, b, diag(p))
##### new implementation
GG = graphml::init_graph(G, b, V)
J = 2000
test = graphml::rgw(J, GG)
samps = graphml::evalPsi(test, GG)
u_df_cpp = data.frame(samps)
u_df_names = character(GG$D + 1)
for (d in 1:GG$D) {
u_df_names[d] = paste("u", d, sep = '')
}
u_df_names[GG$D + 1] = "psi_u"
names(u_df_cpp) = u_df_names
u_star_cpp = graphml::calcMode(as.matrix(u_df_cpp), GG)
h(u_df_cpp, GG, GG$D, u_0 = u_star_cpp)
library(dplyr)
h(u_df_cpp, GG, GG$D, u_0 = u_star_cpp)
BDgraph::gnorm(G, b, V, 1000)
u_rpart = rpart::rpart(psi_u ~ ., u_df_cpp)
param_support = graphml::support(samps, GG$D)
u_partition = hybridml::extractPartition(u_rpart, param_support)
u_df_part = u_df_cpp %>% dplyr::mutate(leaf_id = u_rpart$where)
l1_cost = apply(u_df_part[,1:GG$D], 1, hybridml::l1_norm, u_0 = u_star)
u_df_part = u_df_part %>% dplyr::mutate(l1_cost = l1_cost)
# take min result, group_by() leaf_id
psi_df = u_df_part %>%
dplyr::group_by(leaf_id) %>% dplyr::filter(l1_cost == min(l1_cost)) %>%
data.frame
bounds = u_partition %>% dplyr::arrange(leaf_id) %>%
dplyr::select(-c("psi_hat", "leaf_id"))
psi_df %>% head
test_func = findAllCandidatePoints(as.matrix(u_df_part), unname(u_rpart$where),
u_star, GG$D)
dim(samps)
unname(u_rpart$where) %>% length
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(test, GG)
u_df_cpp = data.frame(samps_psi)
u_df_names = character(GG$D + 1)
for (d in 1:GG$D) {
u_df_names[d] = paste("u", d, sep = '')
}
u_df_names[GG$D + 1] = "psi_u"
names(u_df_cpp) = u_df_names
u_star_cpp = graphml::calcMode(as.matrix(u_df_cpp), GG)
h(u_df_cpp, GG, GG$D, u_0 = u_star_cpp)
BDgraph::gnorm(G, b, V, 1000)
BDgraph::gnorm(G, b, V, 1000)
J = 2000
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(test, GG)
u_df_cpp = data.frame(samps_psi)
u_df_names = character(GG$D + 1)
for (d in 1:GG$D) {
u_df_names[d] = paste("u", d, sep = '')
}
u_df_names[GG$D + 1] = "psi_u"
names(u_df_cpp) = u_df_names
u_star_cpp = graphml::calcMode(as.matrix(u_df_cpp), GG)
h(u_df_cpp, GG, GG$D, u_0 = u_star_cpp)
J = 2000
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(test, GG)
u_df_cpp = data.frame(samps_psi)
u_df_names = character(GG$D + 1)
for (d in 1:GG$D) {
u_df_names[d] = paste("u", d, sep = '')
}
u_df_names[GG$D + 1] = "psi_u"
names(u_df_cpp) = u_df_names
u_star_cpp = graphml::calcMode(as.matrix(u_df_cpp), GG)
h(u_df_cpp, GG, GG$D, u_0 = u_star_cpp)
J = 2000
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(test, GG)
u_df_cpp = data.frame(samps_psi)
u_df_names = character(GG$D + 1)
for (d in 1:GG$D) {
u_df_names[d] = paste("u", d, sep = '')
}
u_df_names[GG$D + 1] = "psi_u"
names(u_df_cpp) = u_df_names
u_star_cpp = graphml::calcMode(as.matrix(u_df_cpp), GG)
h(u_df_cpp, GG, GG$D, u_0 = u_star_cpp)
J = 2000
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(test, GG)
u_df_cpp = data.frame(samps_psi)
u_df_names = character(GG$D + 1)
for (d in 1:GG$D) {
u_df_names[d] = paste("u", d, sep = '')
}
u_df_names[GG$D + 1] = "psi_u"
names(u_df_cpp) = u_df_names
u_star_cpp = graphml::calcMode(as.matrix(u_df_cpp), GG)
h(u_df_cpp, GG, GG$D, u_0 = u_star_cpp)
J = 2000
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(test, GG)
u_df_cpp = data.frame(samps_psi)
u_df_names = character(GG$D + 1)
for (d in 1:GG$D) {
u_df_names[d] = paste("u", d, sep = '')
}
u_df_names[GG$D + 1] = "psi_u"
names(u_df_cpp) = u_df_names
u_star_cpp = graphml::calcMode(as.matrix(u_df_cpp), GG)
h(u_df_cpp, GG, GG$D, u_0 = u_star_cpp)
J = 1000
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(test, GG)
u_df_cpp = data.frame(samps_psi)
u_df_names = character(GG$D + 1)
for (d in 1:GG$D) {
u_df_names[d] = paste("u", d, sep = '')
}
u_df_names[GG$D + 1] = "psi_u"
names(u_df_cpp) = u_df_names
u_star_cpp = graphml::calcMode(as.matrix(u_df_cpp), GG)
h(u_df_cpp, GG, GG$D, u_0 = u_star_cpp)
u_df_cpp %>% head
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(test, GG)
u_df_cpp = data.frame(samps_psi)
u_df_cpp %>% head
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(test, GG)
u_df_cpp = data.frame(samps_psi)
u_df_cpp %>% head
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(test, GG)
u_df_cpp = data.frame(samps_psi)
u_df_cpp %>% head
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(test, GG)
u_df_cpp = data.frame(samps_psi)
u_df_cpp %>% head
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(test, GG)
u_df_cpp = data.frame(samps_psi)
u_df_cpp %>% head
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(test, GG)
u_df_cpp = data.frame(samps_psi)
u_df_cpp %>% head
##### old implementation
GG = graphml::init_graph(G, b, V)
samps = rGW(J, GG)
samps %>% head
samps = rGW(J, GG)
u_samps = samps$Psi_free %>% data.frame
u_samps %>% head
samps = rGW(J, GG)
u_samps = samps$Psi_free %>% data.frame
u_samps %>% head
samps = rGW(J, GG)
u_samps = samps$Psi_free %>% data.frame
u_samps %>% head
samps = rGW(J, GG)
u_samps = samps$Psi_free %>% data.frame
u_samps %>% head
samps = rGW(J, GG)
u_samps = samps$Psi_free %>% data.frame
u_samps %>% head
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(samps, GG)
u_df_cpp = data.frame(samps_psi)
# u_df_cpp %>% head
u_df_names = character(GG$D + 1)
for (d in 1:GG$D) {
u_df_names[d] = paste("u", d, sep = '')
}
u_df_names[GG$D + 1] = "psi_u"
names(u_df_cpp) = u_df_names
u_star_cpp = graphml::calcMode(as.matrix(u_df_cpp), GG)
h(u_df_cpp, GG, GG$D, u_0 = u_star_cpp)
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(samps, GG)
u_df_cpp = data.frame(samps_psi)
# u_df_cpp %>% head
u_df_names = character(GG$D + 1)
for (d in 1:GG$D) {
u_df_names[d] = paste("u", d, sep = '')
}
u_df_names[GG$D + 1] = "psi_u"
names(u_df_cpp) = u_df_names
u_star_cpp = graphml::calcMode(as.matrix(u_df_cpp), GG)
h(u_df_cpp, GG, GG$D, u_0 = u_star_cpp)
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(samps, GG)
u_df_cpp = data.frame(samps_psi)
# u_df_cpp %>% head
u_df_names = character(GG$D + 1)
for (d in 1:GG$D) {
u_df_names[d] = paste("u", d, sep = '')
}
u_df_names[GG$D + 1] = "psi_u"
names(u_df_cpp) = u_df_names
u_star_cpp = graphml::calcMode(as.matrix(u_df_cpp), GG)
h(u_df_cpp, GG, GG$D, u_0 = u_star_cpp)
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(samps, GG)
u_df_cpp = data.frame(samps_psi)
# u_df_cpp %>% head
u_df_names = character(GG$D + 1)
for (d in 1:GG$D) {
u_df_names[d] = paste("u", d, sep = '')
}
u_df_names[GG$D + 1] = "psi_u"
names(u_df_cpp) = u_df_names
u_star_cpp = graphml::calcMode(as.matrix(u_df_cpp), GG)
h(u_df_cpp, GG, GG$D, u_0 = u_star_cpp)
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(samps, GG)
u_df_cpp = data.frame(samps_psi)
# u_df_cpp %>% head
u_df_names = character(GG$D + 1)
for (d in 1:GG$D) {
u_df_names[d] = paste("u", d, sep = '')
}
u_df_names[GG$D + 1] = "psi_u"
names(u_df_cpp) = u_df_names
u_star_cpp = graphml::calcMode(as.matrix(u_df_cpp), GG)
h(u_df_cpp, GG, GG$D, u_0 = u_star_cpp)
BDgraph::gnorm(G, b, V, 1000)
samps %>% head
test_func = findAllCandidatePoints(samps, unname(u_rpart$where),
u_star, GG$D)
library(graphml)
test_func = findAllCandidatePoints(samps, unname(u_rpart$where),
u_star, GG$D)
library(graphml)
test_func = findAllCandidatePoints(samps, unname(u_rpart$where),
u_star, GG$D)
library(graphml)
test_func = findAllCandidatePoints(samps, unname(u_rpart$where),
u_star, GG$D)
library(graphml)
test_func = findAllCandidatePoints(samps, unname(u_rpart$where),
u_star, GG$D)
u_df_part$leaf_id %>% unique
u_df_part$leaf_id %>% unique %>% length
library(graphml)
test_func = findAllCandidatePoints(samps, unname(u_rpart$where),
u_star, GG$D)
u_df_part[1999,]
u_df_part[1995,]
samps %>% dim
library(graphml)
J = 2000
samps = graphml::rgw(J, GG)
samps_psi = graphml::evalPsi(samps, GG)
u_df_cpp = data.frame(samps_psi)
# u_df_cpp %>% head
u_df_names = character(GG$D + 1)
for (d in 1:GG$D) {
u_df_names[d] = paste("u", d, sep = '')
}
u_df_names[GG$D + 1] = "psi_u"
names(u_df_cpp) = u_df_names
u_star_cpp = graphml::calcMode(as.matrix(u_df_cpp), GG)
h(u_df_cpp, GG, GG$D, u_0 = u_star_cpp)
BDgraph::gnorm(G, b, V, 1000)
u_rpart = rpart::rpart(psi_u ~ ., u_df_cpp)
param_support = graphml::support(samps, GG$D)
u_partition = hybridml::extractPartition(u_rpart, param_support)
u_df_part = u_df_cpp %>% dplyr::mutate(leaf_id = u_rpart$where)
l1_cost = apply(u_df_part[,1:GG$D], 1, hybridml::l1_norm, u_0 = u_star)
u_df_part = u_df_part %>% dplyr::mutate(l1_cost = l1_cost)
# take min result, group_by() leaf_id
psi_df = u_df_part %>%
dplyr::group_by(leaf_id) %>% dplyr::filter(l1_cost == min(l1_cost)) %>%
data.frame
psi_df %>% head
test_func = findAllCandidatePoints(samps, unname(u_rpart$where),
u_star, GG$D)
library(graphml)
test_func = findAllCandidatePoints(samps, unname(u_rpart$where),
u_star, GG$D)
test_func %>% dim
test_func
psi_df
unname(u_rpart$where) %>% sort
unname(u_rpart$where) %>% unique %>% sort
test_func
psi_df
r = function() {
u_rpart = rpart::rpart(psi_u ~ ., u_df_cpp)
param_support = graphml::support(samps, GG$D)
u_partition = hybridml::extractPartition(u_rpart, param_support)
u_df_part = u_df_cpp %>% dplyr::mutate(leaf_id = u_rpart$where)
l1_cost = apply(u_df_part[,1:GG$D], 1, hybridml::l1_norm, u_0 = u_star)
u_df_part = u_df_part %>% dplyr::mutate(l1_cost = l1_cost)
# take min result, group_by() leaf_id
psi_df = u_df_part %>%
dplyr::group_by(leaf_id) %>% dplyr::filter(l1_cost == min(l1_cost)) %>%
data.frame
}
r()
r = function() {
u_df_part = u_df_cpp %>% dplyr::mutate(leaf_id = u_rpart$where)
l1_cost = apply(u_df_part[,1:GG$D], 1, hybridml::l1_norm, u_0 = u_star)
u_df_part = u_df_part %>% dplyr::mutate(l1_cost = l1_cost)
# take min result, group_by() leaf_id
psi_df = u_df_part %>%
dplyr::group_by(leaf_id) %>% dplyr::filter(l1_cost == min(l1_cost)) %>%
data.frame
}
microbenchmark::microbenchmark(
r = r(),
cpp = findAllCandidatePoints(samps, unname(u_rpart$where),
u_star, GG$D),
times = 10
)
library(graphml)
library(graphml)
test_func = findAllCandidatePoints(samps, unname(u_rpart$where),
u_star, GG$D)
test_func %>% tail
bounds
bounds
u_partition
u_partition %>% dplyr::arrange(leaf_id) %>%
dplyr::select(-c("psi_hat", "leaf_id"))
bounds
t(bounds)
library(graphml)
t(bounds)
u_partition
bounds = u_partition %>% dplyr::arrange(leaf_id) %>%
dplyr::select(-c("psi_hat", "leaf_id"))
u_partition$leaf_id
test_func = createPartitionMap(t(bounds), u_partition$leaf_id)
test_func
# take min result, group_by() leaf_id
psi_df = u_df_part %>%
dplyr::group_by(leaf_id) %>% dplyr::filter(l1_cost == min(l1_cost)) %>%
data.frame
bounds = u_partition %>% dplyr::arrange(leaf_id) %>%
dplyr::select(-c("psi_hat", "leaf_id"))
psi_df = psi_df %>% dplyr::arrange(leaf_id)
K = nrow(bounds)
graphml::approx_integral(K, as.matrix(psi_df), as.matrix(bounds), params)
graphml::approx_integral(K, as.matrix(psi_df), as.matrix(bounds), GG)
h(u_df, GG, GG$D, u_0 = u_star)
BDgraph::gnorm(G, b, V, 1000)
h(u_df_cpp, GG, GG$D, u_0 = u_star_cpp)
bounds
bounds
graphml::calcMode(as.matrix(u_df_cpp), GG)
calcMode(as.matrix(u_df_cpp), GG)
u_df_cpp
GG
calcMode(as.matrix(u_df_cpp), GG)
calcMode
create_psi_mat_cpp(u, GG)
graphml::calcMode(as.matrix(u_df_cpp), GG)
library(graphml)
install.packages("RcppArmadillo")
install.packages("data.table")
install.packages("RcppArmadillo")
